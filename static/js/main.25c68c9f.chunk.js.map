{"version":3,"sources":["App.js","serviceWorker.js","state.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","videoDevice","stream","undefined","streams","devices","startCamera","navigator","mediaDevices","getUserMedia","audio","video","setState","window","enumerateDevices","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_ref2","value","id","document","getElementById","console","log","srcObject","play","err","return","_this2","react_default","a","createElement","RadioGroup_default","onChange","e","target","map","_ref3","deviceId","groupId","kind","label","FormControlLabel_default","control","Radio_default","key","Component","withStyles","theme","button","margin","spacing","unit","Boolean","location","hostname","match","initialState","Immutable","fromJS","hello","actions","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","arguments","length","action","type","applyMiddleware","thunk","installStyles","createMuiTheme","typography","useNextVariants","ReactDOM","render","es","styles","src_App","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAgBMA,cAOJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAPFI,MAAQ,CACNC,YAAa,GACbC,YAAQC,EACRC,QAAS,GACTC,QAAS,IAITZ,EAAKa,cAFOb,6MAOSc,UAAUC,aAAaC,aAAa,CACvDC,OAAO,EACPC,OAAO,kBAFHT,SAINN,KAAKgB,SAAS,CAACV,oBAMOW,OAAON,UAAUC,aAAaM,0BAA9CT,SACNT,KAAKgB,SAAS,CAAEP,2JAEG,IACXD,EAAYR,KAAKI,MAAjBI,QADWW,GAAA,EAAAC,GAAA,EAAAC,OAAAd,EAAA,IAEnB,QAAAe,EAAAC,EAA6Bf,EAA7BgB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAsC,KAAAS,EAAAN,EAAAO,MAAzBC,EAAyBF,EAAzBE,GAAIxB,EAAqBsB,EAArBtB,OACTS,EAAQgB,SAASC,eAAeF,GACtCG,QAAQC,IAAI,YAAanB,EAAOT,GAChCS,EAAMoB,UAAY7B,EAClBS,EAAMqB,QANW,MAAAC,GAAAjB,GAAA,EAAAC,EAAAgB,EAAA,YAAAlB,GAAA,MAAAI,EAAAe,QAAAf,EAAAe,SAAA,WAAAlB,EAAA,MAAAC,qCASZ,IAAAkB,EAAAvC,KACP,OACEwC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEZ,MAAO7B,KAAKI,MAAMC,YAClBuC,SAAU,SAAAC,GAAC,OAAIN,EAAKvB,SAAS,CAAEX,YAAawC,EAAEC,OAAOjB,UAEpD7B,KAAKI,MAAMK,QAAQsC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,QAASC,EAAtBH,EAAsBG,KAAMC,EAA5BJ,EAA4BI,MAA5B,OACtBZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CACEa,QAASd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,MACTe,IAAKP,EACLpB,MAAOoB,EACPG,MAAOH,EAAWC,EAAUC,EAAOC,eAhD/BK,aAyDHC,uBAjEA,SAAAC,GAAK,MAAK,CACvBC,OAAQ,CACNC,OAAQF,EAAMG,QAAQC,QA+DXL,CAAmB9D,GC7DdoE,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,uFCdAC,QAAeC,EAAUC,OAAO,CAAEC,MAAO,UAClCC,EAAU,GAQvB,IAAMC,EAAmBxD,OAAOyD,sCAAwCC,IAC3DC,EAAQC,YAPd,WAA4C,IAA9BzE,EAA8B0E,UAAAC,OAAA,QAAAxE,IAAAuE,UAAA,GAAAA,UAAA,GAAtBV,EAAcY,EAAQF,UAAAC,OAAA,EAAAD,UAAA,QAAAvE,EACjD,GAAIiE,EAAQQ,EAAOC,MACjB,OAAOT,EAAQQ,EAAOC,MAAM7E,EAAO4E,IAKAP,EAAiBS,YAAgBC,cCLxEC,cAEA,IAAMzB,EAAQ0B,yBAAe,CAC3BC,WAAY,CACVC,iBAAiB,KAInBC,IAASC,OACPjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAUd,MAAOA,GACfpC,EAAAC,EAAAC,cAACiD,EAAA,iBAAD,CAAkBhC,MAAOA,GACvBnB,EAAAC,EAAAC,cAACkD,EAAD,QAGJ7D,SAASC,eAAe,SF0GtB,kBAAmBrB,WACrBA,UAAUkF,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.25c68c9f.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport Button from \"@material-ui/core/Button\"\nimport RadioGroup from \"@material-ui/core/RadioGroup\"\nimport Radio from \"@material-ui/core/Radio\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Typography from \"@material-ui/core/Typography\"\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit\n  }\n})\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nclass App extends Component {\n  state = {\n    videoDevice: \"\",\n    stream: undefined,\n    streams: [],\n    devices: []\n  }\n  constructor() {\n    super()\n    this.startCamera();\n  }\n\n  async startCamera() {\n    // setup camera\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: true\n    })\n    this.setState({stream});\n    /*\n    const video = document.getElementById(\"cameraPreview\")\n    video.srcObject = stream\n    video.play()\n    */\n    const devices = await window.navigator.mediaDevices.enumerateDevices()\n    this.setState({ devices })\n  }\n  componentDidUpdate() {\n    const { streams } = this.state\n    for (const { id, stream } of streams) {\n      const video = document.getElementById(id)\n      console.log(\"didUpdate\", video, stream)\n      video.srcObject = stream\n      video.play()\n    }\n  }\n  render() {\n    return (\n      <div>\n        <RadioGroup\n          value={this.state.videoDevice}\n          onChange={e => this.setState({ videoDevice: e.target.value })}\n        >\n          {this.state.devices.map(({ deviceId, groupId, kind, label }) => (\n            <FormControlLabel\n              control={<Radio />}\n              key={deviceId}\n              value={deviceId}\n              label={deviceId + groupId + kind + label}\n            />\n          ))}\n        </RadioGroup>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { createStore, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport Immutable from \"immutable\"\n\nconst initialState = Immutable.fromJS({ hello: \"world\" })\nexport const actions = {}\n\nexport function root(state = initialState, action) {\n  if (actions[action.type]) {\n    return actions[action.type](state, action)\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nexport const store = createStore(root, composeEnhancers(applyMiddleware(thunk)))\n","import { install as installStyles } from \"@material-ui/styles\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\"\nimport { Provider } from \"react-redux\"\nimport { store } from \"./state\"\nimport \"typeface-roboto\"\ninstallStyles()\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  }\n})\nfunction render() {\n  ReactDOM.render(\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <App />\n      </MuiThemeProvider>\n    </Provider>,\n    document.getElementById(\"root\")\n  )\n}\nrender()\n\n/*\nif (module.hot) {\n  module.hot.accept([\"./App\"], render);\n}\n*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}